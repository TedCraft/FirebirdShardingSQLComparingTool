{
  "Test1": {
    "Name": "E011 Numeric data types",
    "Case": [
      {
        "NameCase": "E011-01 INTEGER and SMALLINT data types",
        "Query1": "Create table IntegerData (INTD1 INTEGER,INTD2 INTEGER,INTD3 INTEGER,Primary key(INTD1))",
        "Query2": "Insert into IntegerData (INTD1,INTD2,INTD3) values (2147483647, -2147483647, 0)",
        "Query3": "Create table SmallintData (SMINTD1 SMALLINT,SMINTD2 SMALLINT,SMINTD3 SMALLINT,Primary key(SMINTD1))",
        "Query4": "Insert into SmallintData (SMINTD1,SMINTD2,SMINTD3) values (32766, -32766, 0)"
      },
      {
        "NameCase": "E011-02 REAL, DOUBLE PRECISION and FLOAT data types",
        "Query1": "Create table RealData (REALD1 REAL,REALD2 REAL,REALD3 REAL,Primary key(REALD1))",
        "Query2": "Insert into RealData (REALD1,REALD2,REALD3) values (-3.40*EXP(38), 3.40*EXP(38), 0)",
        "Query3": "Create table DoubleData (DOUBLEP1 DOUBLE PRECISION,DOUBLEP2 DOUBLE PRECISION,DOUBLEP3 DOUBLE PRECISION,Primary key(DOUBLEP1))",
        "Query4": "Insert into DoubleData (DOUBLEP1,DOUBLEP2,DOUBLEP3) values (-2.22*EXP(308), 2.22*EXP(308), 0)",
        "Query5": "Create table FloatData (FLOAT1 FLOAT(10),FLOAT2 FLOAT(4),FLOAT3 FLOAT(8),Primary key(FLOAT1))",
        "Query6": "Insert into FloatData (FLOAT1,FLOAT2,FLOAT3) values (543.23, 5434533453, 0)"
      },
      {
        "NameCase": "E011-03 DECIMAL and NUMERIC data types",
        "Query1": "Create table NumericData (NUMD1 NUMERIC(10,5),NUMD2 NUMERIC(4,2),NUMD3 NUMERIC(9,4),Primary key(NUMD1))",
        "Query2": "Insert into NumericData (NUMD1,NUMD2,NUMD3) values (128, -50, 19248)",
        "Query3": "Create table DecimalData (DEC1 DECIMAL(10,5),DEC2 DECIMAL(4,2),DEC3 DECIMAL(9,4),Primary key(DEC1))",
        "Query4": "Insert into DecimalData (DEC1,DEC2,DEC3) values (128, -50, 19248)"
      },
      {
        "NameCase": "E011-04 Arithmetic operators",
        "Query1": "SELECT INTD2 + 1000 FROM IntegerData",
        "Query2": "SELECT INTD1 - 1000 FROM IntegerData",
        "Query3": "SELECT SMINTD2 * 1 FROM SmallintData",
        "Query4": "SELECT SMINTD2 / SMINTD1 FROM SmallintData"
      },
      {
        "NameCase": "E011-05 Numeric comparison",
        "Query1": "SELECT * FROM IntegerData WHERE INTD1 > INTD2",
        "Query2": "SELECT * FROM SmallintData WHERE SMINTD2 < SMINTD3",
        "Query3": "SELECT * FROM DecimalData WHERE DEC1 = DEC2",
        "Query4": "SELECT * FROM DecimalData WHERE DEC3 >= DEC2",
        "Query5": "SELECT * FROM NumericData WHERE NUMD1 <= NUMD3",
        "Query6": "SELECT * FROM FloatData WHERE FLOAT1 <> FLOAT2"
      },
      {
        "NameCase": "E011-06 Implicit casting among the numeric data types",
        "Query1": "Create table ImplicitCastingNum (CHARD CHAR(3), DOUBLEP DOUBLE PRECISION,INTD INTEGER,Primary key(CHARD))",
        "Query2": "Insert into ImplicitCastingNum (CHARD,DOUBLEP,INTD) values ('128', -50.23, 19248)",
        "Query3": "SELECT INTD * DOUBLEP FROM ImplicitCastingNum"
      }
    ]
  },
  "Test2": {
    "Name": "E021 Character string types",
    "Case": [
      {
        "NameCase": "E021-01 CHARACTER data type",
        "Query1": "Create table CharData (CHARD CHAR(11),Primary key(CHARD))",
        "Query2": "Insert into CharData (CHARD) values ('CharData')",
        "Query3": "Create table CharacterData (CHARACTERD CHARACTER(22),Primary key(CHARACTERD))",
        "Query4": "Insert into CharacterData (CHARACTERD) values ('CharacterData')"
      },
      {
        "NameCase": "E021-02 CHARACTER VARYING data type",
        "Query1": "Create table VarCharData (VCAHRD VARCHAR(11),Primary key(VCAHRD))",
        "Query2": "Insert into VarCharData (VCAHRD) values ('VarCharData')",
        "Query3": "Create table CharVaryingData (CHARVD CHARACTER VARYING(20),Primary key(CHARVD))",
        "Query4": "Insert into CharVaryingData (CHARVD) values ('CharVaryingData')"
      },
      {
        "NameCase": "E021-03 Character literals",
        "Query1": "Select 'VCHARD VCHARD' from VarCharData",
        "Query2": "Select 'CHARVD \n CHARVD' from CharVaryingData",
        "Query3": "Select 'CHARD \\ CHARD' from CharData"
      },
      {
        "NameCase": "E021-04 CHARACTER_LENGTH function",
        "Query1": "SELECT CHARACTER_LENGTH(CHARVD) from CharVaryingData"
      },
      {
        "NameCase": "E021-05 OCTET_LENGTH function",
        "Query1": "SELECT OCTET_LENGTH(CHARVD) from CharVaryingData"
      },
      {
        "NameCase": "E021-06 SUBSTRING function",
        "Query1": "SELECT CHARVD, SUBSTRING(CHARVD FROM 3 FOR 4) as FirstSymbol, SUBSTRING(CHARVD FROM 3 FOR 2) as ThirdAndFourthCharacters from CharVaryingData"
      },
      {
        "NameCase": "E021-07 Character concatenation",
        "Query1": "SELECT CHARACTERD || CHARACTERD from CharacterData"
      },
      {
        "NameCase": "E021-08 UPPER and LOWER functions",
        "Query1": "SELECT CHARACTERD,UPPER(CHARACTERD) as UpSymbol, LOWER(CHARACTERD) as LowSymbol from CharacterData"
      },
      {
        "NameCase": "E021-09 TRIM function",
        "Query1": "Create table TrimTest (TRTEST VARCHAR(11),Primary key(TRTEST))",
        "Query2": "Insert into TrimTest (TRTEST) values ('.,! Test.')",
        "Query3": "SELECT TRIM ('.,! ' from TRTEST) as ResTrimTest  from TrimTest"
      },
      {
        "NameCase": "E021-10 Implicit casting among the fixed-length and variablelength character string types",
        "Query1": "Create table ImplicitCastingChar (CHARD1 CHAR(35),CHARD2 CHAR(10),Primary key(CHARD1))",
        "Query2": "Insert into ImplicitCastingChar (CHARD1,CHARD2) values ('abcdefhgdg','1234567')",
        "Query3": "SELECT CAST(CHARD1 as VARCHAR(30)) from ImplicitCastingChar",
        "Query4": "SELECT CAST(CHARD2 as VARCHAR(30)) from ImplicitCastingChar"
      },
      {
        "NameCase": "E021-11 POSITION function",
        "Query1": "Create table PositionTest (CHARD CHAR(10),Primary key(CHARD))",
        "Query2": "Insert into PositionTest (CHARD) values ('P3SITION1')",
        "Query3": "SELECT POSITION('3' IN CHARD) as PositionRes from PositionTest"
      },
      {
        "NameCase": "E021-12 Character comparison",
        "Query1": "Create table CharComparisonTest (CHARD1 CHAR(10),CHARD2 CHAR(15),CHARD3 CHAR(10), Primary key(CHARD1))",
        "Query2": "Insert into CharComparisonTest (CHARD1,CHARD2,CHARD3) values ('String213','Str23','String213')",
        "Query3": "SELECT * FROM CharComparisonTest WHERE CHARD1 LIKE 'Str%'",
        "Query4": "SELECT * FROM CharComparisonTest WHERE CHARD2 NOT LIKE '23'"
      }
    ]
  },
  "Test3": {
    "Name": "E031 Identifiers",
    "Case": [
      {
        "NameCase": "E031-01 Delimited identifiers",
        "Query1": "SELECT \"CHARD1\" from CharComparisonTest"
      },
      {
        "NameCase": "E031-02 Lower case identifiers",
        "Query1": "SELECT chard1 from CharComparisonTest"
      },
      {
        "NameCase": "E031-03 Trailing underscore",
        "Query1": "Create table TrailingUnderscore_ (CHARD_ CHAR(10), Primary key(CHARD_))"
      }
    ]
  },
  "Test4": {
    "Name": "E051 Basic query specification",
    "Case": [
      {
        "NameCase": "E051-01 SELECT DISTINCT",
        "Query1": "CREATE TABLE Persons (PersonID int,LastName varchar(255),FirstName varchar(255),Country varchar(255),City varchar(255))",
        "Query2": "Insert into Persons (PersonID,LastName,FirstName,Country,City) values (0,'Ivan','Ivanov','Russia','Moscow')",
        "Query3": "Insert into Persons (PersonID,LastName,FirstName,Country,City) values (0,'Ivan','Ivanov','Russia','Moscow')",
        "Query4": "Insert into Persons (PersonID,LastName,FirstName,Country,City) values (0,'Ivan','Ivanov','Russia','Moscow')",
        "Query5": "SELECT DISTINCT * FROM Persons"
      },
      {
        "NameCase": "E051-02 GROUP BY clause",
        "Query1": "CREATE TABLE PersonsNew (PersonID int,LastName varchar(255),FirstName varchar(255),Country varchar(255),City varchar(255),Primary key(PersonID));",
        "Query2": "Insert into PersonsNew (PersonID,LastName,FirstName,Country,City) values (0,'Ivan','Ivanov','Russia','Moscow')",
        "Query3": "Insert into PersonsNew (PersonID,LastName,FirstName,Country,City) values (1,'Michail','Petrov','Russia','St.Pitersburg')",
        "Query4": "Insert into PersonsNew (PersonID,LastName,FirstName,Country,City) values (2,'Sergey','Vesylev','Russia','Vladivostok')",
        "Query5": "Insert into PersonsNew (PersonID,LastName,FirstName,Country,City) values (3,'Peter','Jacson','USA','New-York')",
        "Query6": "Insert into PersonsNew (PersonID,LastName,FirstName,Country,City) values (4,'Claus','Jorgingston','USA','Chicago')",
        "Query7": "SELECT Country, COUNT(*) AS PersonCount FROM PersonsNew GROUP BY Country;"
      },
      {
        "NameCase": "E051-04 GROUP BY can contain columns not in <select list>",
        "Query1": "SELECT COUNT(*) FROM PersonsNew GROUP BY Country;"
      },
      {
        "NameCase": "E051-05 Select list items can be renamed",
        "Query1": "SELECT PersonID AS PerID, LastName AS LN, City AS C FROM PersonsNew"
      },
      {
        "NameCase": "E051-06 HAVING clause",
        "Query1": "SELECT Country, COUNT(*) AS PersonCount from PersonsNew GROUP BY Country HAVING COUNT(*) > 2"
      },
      {
        "NameCase": "E051-07 Qualified * in select list",
        "Query1": "SELECT * FROM (SELECT Country, COUNT(*) AS PersonCount FROM PersonsNew GROUP BY Country)"
      },
      {
        "NameCase": "E051-08 Correlation names in the FROM clause",
        "Query1": "SELECT * FROM (SELECT Country FROM PersonsNew GROUP BY Country) AS T1 where T1.Country = 'USA'"
      },
      {
        "NameCase": "E051-09 Rename columns in the FROM clause",
        "Query1": "SELECT * FROM (SELECT Country, COUNT(*) AS PersonCount FROM PersonsNew GROUP BY Country) AS T1"
      }
    ]
  },
  "Test5": {
    "Name": "E061 Basic predicates and search conditions",
    "Case": [
      {
        "NameCase": "E061-01 Comparison predicate",
        "Query1": "CREATE TABLE Computers (ID int ,Model varchar(255),SpeedCPU int,Ram int,HDD int,Price float,Primary key(ID));",
        "Query2": "Insert into Computers (ID,Model,SpeedCPU,Ram,HDD,Price) values (0,'1084','500','2048','500',1200.90)",
        "Query3": "Insert into Computers (ID,Model,SpeedCPU,Ram,HDD,Price) values (1,'1268','960','256','256',800.00)",
        "Query4": "Insert into Computers (ID,Model,SpeedCPU,Ram,HDD,Price) values (2,'1190','2200','128','128',350.50)",
        "Query5": "Insert into Computers (ID,Model,SpeedCPU,Ram,HDD,Price) values (3,'1260','340','4096','1024',900.00)",
        "Query6": "Insert into Computers (ID,Model,SpeedCPU,Ram,HDD,Price) values (4,'1090','400','32','64',1100.00)",
        "Query7": "SELECT * FROM Computers WHERE SpeedCPU >= 600 and Price < 1000"
      },
      {
        "NameCase": "E061-02 BETWEEN predicate",
        "Query1": "SELECT model, SpeedCPU FROM Computers WHERE Price BETWEEN 500 AND 900;"
      },
      {
        "NameCase": "E061-03 IN predicate with list of values",
        "Query1": "SELECT model, HDD FROM Computers WHERE HDD IN (128,500);"
      },
      {
        "NameCase": "E061-04 LIKE predicate",
        "Query1": "SELECT * FROM Computers WHERE Model LIKE '10%';"
      },
      {
        "NameCase": "E061-05 LIKE predicate: ESCAPE clause",
        "Query1": "CREATE TABLE Escapepred (Name varchar(25));",
        "Query2": "Insert into Escapepred (Name) values ('Michaeil_')",
        "Query3": "Insert into Escapepred (Name) values ('Ivan')",
        "Query4": "Insert into Escapepred (Name) values ('Petr')",
        "Query5": "Insert into Escapepred (Name) values ('_Fedor_')",
        "Query6": "SELECT Name FROM Escapepred WHERE Name LIKE '%#_%' ESCAPE '#'"
      },
      {
        "NameCase": "E061-06 NULL predicate",
        "Query1": "Insert into Computers (ID,Model,SpeedCPU,Ram,HDD,Price) values (5,'1360','2600','4096',null,2000.00);",
        "Query2": "SELECT * FROM Computers where HDD IS NULL",
        "Query3": "SELECT * FROM Computers where HDD IS NOT NULL"
      },
      {
        "NameCase": "E061-07 Quantified comparison predicate",
        "Query1": "ALTER TABLE Computers ADD Namecompany Varchar(100)",
        "Query2": "UPDATE Computers SET Namecompany = 'INTEL' WHERE Id IN (0,3)",
        "Query3": "UPDATE Computers SET Namecompany = 'ASUS' WHERE Id IN (1,2)",
        "Query4": "UPDATE Computers SET Namecompany = 'AMD' WHERE Id IN (4,5)",
        "Query5": "CREATE TABLE Company (ID int, NameCompany Varchar(100), TypeProduct Varchar(20),Primary key(ID));",
        "Query6": "Insert into Company (ID,NameCompany,TypeProduct) values (0,'INTEL','pc');",
        "Query7": "Insert into Company (ID,NameCompany,TypeProduct) values (1,'AMD','pc');",
        "Query8": "Insert into Company (ID,NameCompany,TypeProduct) values (2,'ASUS','pc');",
        "Query9": "Insert into Company (ID,NameCompany,TypeProduct) values (3,'ASUS','laptop');",
        "Query10": "Insert into Company (ID,NameCompany,TypeProduct) values (4,'DELL','pc');",
        "Query11": "Insert into Company (ID,NameCompany,TypeProduct) values (5,'DELL','laptop');",
        "Query12": "SELECT NameCompany FROM Company WHERE TypeProduct = 'pc' AND NOT NameCompany = ANY (SELECT NameCompany FROM Computers);",
        "Query13": "SELECT NameCompany FROM Company WHERE TypeProduct = 'pc' AND NOT NameCompany = SOME (SELECT NameCompany FROM Computers);"
      },
      {
        "NameCase": "E061-08 EXISTS predicate",
        "Query1": "Insert into Company (ID,NameCompany,TypeProduct) values (6,'ASUS','printer');",
        "Query2": "SELECT NameCompany FROM Company as C1 WHERE TypeProduct = 'pc' AND EXISTS (SELECT NameCompany FROM Company WHERE TypeProduct = 'printer' and NameCompany = C1.NameCompany);"
      },
      {
        "NameCase": "E061-09 Subqueries in comparison predicate",
        "Query1": "SELECT Model FROM Computers WHERE NameCompany = (SELECT NameCompany FROM Company WHERE NameCompany = 'ASUS' AND TypeProduct = 'pc');"
      },
      {
        "NameCase": "E061-11 Subqueries in IN predicate",
        "Query1": "SELECT Model FROM Computers WHERE SpeedCPU IN(SELECT SpeedCPU FROM Computers WHERE SpeedCPU IN (2600,960));"
      },
      {
        "NameCase": "E061-12 Subqueries in quantified comparison predicate",
        "Query1": "SELECT DISTINCT NameCompany FROM Company WHERE TypeProduct = 'pc' AND NameCompany = (SELECT DISTINCT NameCompany FROM Company WHERE NOT NameCompany = ANY (SELECT NameCompany FROM Computers));"
      },
      {
        "NameCase": "E061-13 Correlated subqueries",
        "Query1": "SELECT Id, Model, NameCompany FROM Computers C1 WHERE SpeedCPU = (SELECT MAX(SpeedCPU) from Computers C2 where C1.Id = C2.Id);"
      },
      {
        "NameCase": "E061-14 Search condition",
        "Query1": "SELECT Model, Price FROM Computers WHERE SpeedCPU > 800 AND HDD < 512;"
      }
    ]
  },
  "Test6": {
    "Name": "E071 Basic query expressions",
    "Case": [
      {
        "NameCase": "E071-01 UNION DISTINCT table operator",
        "Query1": "CREATE TABLE Laptop (ID int ,Model varchar(255),SpeedCPU int,Ram int,HDD int,Price float, Namecompany varchar(100),Primary key(ID));",
        "Query2": "Insert into Laptop (ID,Model,SpeedCPU,Ram,HDD,Price,Namecompany) values (0,'5532','1500','2048','500',4200.90,'DELL')",
        "Query3": "Insert into Laptop (ID,Model,SpeedCPU,Ram,HDD,Price,Namecompany) values (1,'9245','360','256','256',2800.00,'ASUS')",
        "Query4": "Insert into Laptop (ID,Model,SpeedCPU,Ram,HDD,Price,Namecompany) values (2,'4503','1200','128','128',3350.50,'ASUS')",
        "Query5": "Insert into Laptop (ID,Model,SpeedCPU,Ram,HDD,Price,Namecompany) values (3,'5500','1340','4096','1024',1380.00,'DELL')",
        "Query6": "Insert into Laptop (ID,Model,SpeedCPU,Ram,HDD,Price,Namecompany) values (4,'9087','900','32','64',2500.00,'DELL')",
        "Query7": "Insert into Laptop (ID,Model,SpeedCPU,Ram,HDD,Price,Namecompany) values (5,'9083','900','32','128',2500.00,'DELL')",
        "Query8": "SELECT Price FROM Computers UNION SELECT Price FROM Laptop"
      },
      {
        "NameCase": "E071-02 UNION ALL table operator",
        "Query1": "SELECT Price FROM Computers UNION ALL SELECT Price FROM Laptop"
      },
      {
        "NameCase": "E071-03 EXCEPT DISTINCT table operator",
        "Query1": "SELECT Price FROM Laptop EXCEPT SELECT Price FROM Computers"
      },
      {
        "NameCase": "E071-05 Columns combined via table operators need not have exactly the same data type",
        "Query1": "SELECT Price FROM Laptop UNION SELECT Namecompany FROM Computers",
        "Query2": "SELECT Price FROM Laptop UNION ALL SELECT Namecompany FROM Computers"
      },
      {
        "NameCase": "E071-06 Table operators in subqueries",
        "Query1": "SELECT distinct Namecompany FROM Company WHERE Namecompany in (SELECT Namecompany FROM Computers WHERE Price < 1000 UNION ALL SELECT Namecompany FROM Laptop WHERE Price < 2000)"
      }
    ]
  },
  "Test7": {
    "Name": "E081 Basic Privileges",
    "Case": [
      {
        "NameCase": "E081-01 SELECT privilege at the table level",
        "Query1": "CREATE USER selector1 PASSWORD '12345678'",
        "Query2": "GRANT SELECT ON Company to selector1",
        "Query3": "DROP USER selector1"
      },
      {
        "NameCase": "E081-02 DELETE privilege",
        "Query1": "CREATE USER deleter1 PASSWORD '12345678'",
        "Query2": "GRANT DELETE ON Company to deleter1",
        "Query3": "DROP USER deleter1"
      },
      {
        "NameCase": "E081-03 INSERT privilege at the table level",
        "Query1": "CREATE USER inserter1 PASSWORD '12345678'",
        "Query2": "GRANT INSERT ON Company to inserter1",
        "Query3": "DROP USER inserter1"
      },
      {
        "NameCase": "E081-04 UPDATE privilege at the table level",
        "Query1": "CREATE USER updtabler1 PASSWORD '12345678'",
        "Query2": "GRANT UPDATE ON Company to updtabler1",
        "Query3": "DROP USER updtabler1"
      },
      {
        "NameCase": "E081-05 UPDATE privilege at the column level",
        "Query1": "CREATE USER updcolumn1 PASSWORD '12345678'",
        "Query2": "GRANT UPDATE (NameCompany) ON Company to updcolumn1",
        "Query3": "DROP USER updcolumn1"
      },
      {
        "NameCase": "E081-06 REFERENCES privilege at the table levell",
        "Query1": "CREATE USER reftabler1 PASSWORD '12345678'",
        "Query2": "GRANT REFERENCES ON Company to reftabler1",
        "Query3": "DROP USER reftabler1"
      },
      {
        "NameCase": "E081-07 REFERENCES privilege at the column level",
        "Query1": "CREATE USER refcolumn1 PASSWORD '12345678'",
        "Query2": "GRANT REFERENCES (NameCompany) ON Company to refcolumn1",
        "Query3": "DROP USER refcolumn1"
      },
      {
        "NameCase": "E081-08 WITH GRANT OPTION",
        "Query1": "CREATE USER grantoptioner PASSWORD '12345678'",
        "Query2": "GRANT INSERT ON Company  to grantoptioner",
        "Query3": "DROP USER grantoptioner"
      },
      {
        "NameCase": "E081-08 WITH GRANT OPTION",
        "Query1": "CREATE USER grantoptioner PASSWORD '12345678'",
        "Query2": "GRANT INSERT ON Company  to grantoptioner",
        "Query3": "DROP USER grantoptioner"
      },
      {
        "NameCase": "E081-09 USAGE privilege",
        "Query1": "CREATE USER usager1 PASSWORD '12345678'",
        "Query2": "GRANT USAGE ON Company  to usager1",
        "Query3": "DROP USER usager1"
      },
      {
        "NameCase": "E081-10 EXECUTE privilege",
        "Query1": "CREATE USER executer1 PASSWORD '12345678'",
        "Query2": "GRANT EXECUTE ON Company  to executer1",
        "Query3": "DROP USER executer1"
      }
    ]
  },
  "Test8": {
    "Name": "E091 Set functions",
    "Case": [
      {
        "NameCase": "E091-01 AVG",
        "Query1": "SELECT AVG(price) FROM Computers"
      },
      {
        "NameCase": "E091-02 COUNT",
        "Query1": "SELECT COUNT(id) FROM Computers"
      },
      {
        "NameCase": "E091-03 MAX",
        "Query1": "SELECT MAX(RAM) FROM Computers"
      },
      {
        "NameCase": "E091-04 MIN",
        "Query1": "SELECT MIN(HDD) FROM Computers"
      },
      {
        "NameCase": "E091-05 SUM",
        "Query1": "SELECT SUM(price) FROM Computers"
      },
      {
        "NameCase": "E091-06 ALL",
        "Query1": "SELECT ALL namecompany FROM Computers"
      },
      {
        "NameCase": "E091-07 DISTINCT",
        "Query1": "SELECT DISTINCT namecompany FROM Computers"
      }
    ]
  },
  "Test9": {
    "Name": "E101 Basic data manipulation",
    "Case": [
      {
        "NameCase": "E101-01 INSERT statement",
        "Query1": "Insert into Company (ID,NameCompany,TypeProduct) values (7,'Apple','pc')"
      },
      {
        "NameCase": "E101-03 Searched UPDATE statement",
        "Query1": "UPDATE Computers SET price = 3000 WHERE speedcpu > 1000"
      },
      {
        "NameCase": "E101-04 Searched DELETE statement",
        "Query1": "DELETE FROM Company WHERE NameCompany = 'Apple'"
      }
    ]
  },
  "Test10": {
    "Name": "E111 Single row SELECT statement",
    "Case": [
      {
        "NameCase": "E101 Single row SELECT statement",
        "Query1": "SELECT * FROM Computers WHERE id = 1"
      }
    ]
  },
  "Test11": {
    "Name": "E121 Basic cursor support",
    "Case": [
      {
        "NameCase": "E121-01 DECLARE CURSOR",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS1\nbefore update on Company\nAS\nDECLARE cursor1 CURSOR for\n(select id, namecompany, typeproduct from company where typeproduct = 'pc');\nBEGIN\nend"
      },
      {
        "NameCase": "E121-02 ORDER BY columns need not be in select list",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS2\nbefore update on Company\nAS\nDECLARE cursor2 CURSOR for\n(select id, namecompany from company order by typeproduct);\nbegin\nend"
      },
      {
        "NameCase": "E121-03 Value expressions in ORDER BY clause",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS3\nbefore update on Company\nAS\nDECLARE cursor3 CURSOR for\n(select id, namecompany, typeproduct as type from company order by type);\nbegin\nend"
      },
      {
        "NameCase": "E121-04 OPEN statement",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS4\nbefore update on Company\nAS\nDECLARE cursor4 CURSOR for\n(select id, namecompany from company order by namecompany desc);\nbegin\nopen cursor4;\nend"
      },
      {
        "NameCase": "E121-06 Positioned UPDATE statement",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS5\nbefore update on Company\nAS\nDECLARE cursor5 CURSOR for\n(select id, namecompany from company where typeproduct = 'pc' order by typeproduct desc);\nbegin\nopen cursor5;\nupdate company set typeproduct = 'personal computer' where current of cursor5;\nend"
      },
      {
        "NameCase": "E121-07 Positioned DELETE statement",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS6\nbefore update on Company\nAS\nDECLARE cursor6 CURSOR for\n(select id, namecompany from company where typeproduct = 'pc' order by typeproduct desc);\nbegin\nopen cursor6;\ndelete from company where current of cursor6;\nend"
      },
      {
        "NameCase": "E121-08 CLOSE statement",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS7\nbefore update on Company\nAS\nDECLARE cursor7 CURSOR for\n(select id, namecompany from company where typeproduct = 'pc' order by typeproduct desc);\nbegin\nopen cursor7;\ndelete from company where current of cursor7;\nclose cursor7;\nend"
      },
      {
        "NameCase": "E121-09 FETCH statement: implicit NEXT",
        "Query1": "CREATE OR ALTER PROCEDURE GET_NAMECOMPANY\nRETURNS (NAMECOM CHAR(30))\nAS DECLARE curs1 CURSOR FOR (Select namecompany from Company where typeproduct = 'pc');\nBEGIN\nOPEN curs1;\nWHILE (1=1) DO\nBEGIN\nFETCH curs1 INTO :NAMECOM;\nIF (ROW_COUNT = 0) THEN\nLEAVE;\nSUSPEND;\nEND\nCLOSE curs1;\nEND;"
      },
      {
        "NameCase": "E121-17 WITH HOLD cursors",
        "Query1": "CREATE OR ALTER TRIGGER DECCURS1\nbefore update on Company\nAS\nDECLARE cursor1 CURSOR WITH HOLD for\n(select id, namecompany from company where typeproduct = 'pc' order by typeproduct desc);\nbegin\nopen cursor1;\nclose cursor1;\nend"
      }
    ]
  }
}